plugins {
    id("com.android.application")
    id("com.google.gms.google-services")
    id("com.google.firebase.crashlytics")
    id("kotlin-android")
    id("kotlin-kapt")
    id("com.google.devtools.ksp")
}

def versionNameBase = "2.0.85"
def versionCodeBase = 155

def betaKeystorePropertiesFile = rootProject.file("keystore-beta.properties")
def uploadKeystorePropertiesFile = rootProject.file("keystore-upload.properties")
def betaKeystoreProperties = new Properties()
def uploadKeystoreProperties = new Properties()

def betaKeyAvailable = betaKeystorePropertiesFile.exists()
def uploadKeyAvailable = uploadKeystorePropertiesFile.exists()

if (betaKeyAvailable) {
    betaKeystoreProperties.load(new FileInputStream(betaKeystorePropertiesFile))
}

if (uploadKeyAvailable) {
    uploadKeystoreProperties.load(new FileInputStream(uploadKeystorePropertiesFile))
}

android {
    compileSdk 34

    defaultConfig {
        applicationId "org.bspb.smartbirds.pro"
        minSdk 21
        targetSdk 34
        versionCode versionCodeBase
        versionName "${versionNameBase}"

        def buildTime = new GregorianCalendar().format("MM-dd-yyyy' 'HH:mm:ss Z")
        buildConfigField "String", "BUILD_TIME", "\"${buildTime}\""

        // default runner for instrumentation tests (androidTest)
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app"s state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: "true"
    }

    signingConfigs {
        release {
            if (uploadKeyAvailable) {
                keyAlias(uploadKeystoreProperties["keyAlias"])
                keyPassword(uploadKeystoreProperties["keyPassword"])
                storeFile file(uploadKeystoreProperties["storeFile"])
                storePassword(uploadKeystoreProperties["storePassword"])
            }
        }

        beta {
            if (betaKeyAvailable) {
                keyAlias(betaKeystoreProperties["keyAlias"])
                keyPassword(betaKeystoreProperties["keyPassword"])
                storeFile file(betaKeystoreProperties["storeFile"])
                storePassword(betaKeystoreProperties["storePassword"])
            }
        }
    }

    buildTypes {
        ext.betaDistributionGroupAliases = "BSPB"

        debug {
            versionNameSuffix "-DEBUG"
            buildConfigField "String", "GIT_SHA", "\"DEBUG\""
            buildConfigField "String", "BACKEND_BASE_URL", "\"https://staging.smartbirds.org/api/staging/\""
            firebaseCrashlytics {
                mappingFileUploadEnabled false
            }
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (uploadKeyAvailable) {
                signingConfig signingConfigs.release
            }

            def gitSha = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField "String", "BACKEND_BASE_URL", "\"https://smartbirds.org/api/\""
        }

        beta {
            versionNameSuffix "-BETA"
            minifyEnabled false
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            if (betaKeyAvailable) {
                signingConfig signingConfigs.beta
            }

            def gitSha = "git rev-parse --short HEAD".execute([], project.rootDir).text.trim()
            buildConfigField "String", "GIT_SHA", "\"${gitSha}\""
            buildConfigField "String", "BACKEND_BASE_URL", "\"https://smartbirds.org/api/\""
        }

        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                output.outputFileName = "smartbirdspro-${variant.versionName}-${versionCodeBase}.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    sourceSets {
        main.java.srcDirs += "src/main/kotlin"
    }

    kapt {
        correctErrorTypes = true
    }

    buildFeatures {
        dataBinding = true
    }

    testOptions {
        animationsDisabled = true
        // enable android orchestrator for isolated tests
        execution "ANDROIDX_TEST_ORCHESTRATOR"
    }
    lint {
        abortOnError true
    }
    namespace "org.bspb.smartbirds.pro"
}

dependencies {
    def room_version = "2.6.1"

    implementation("androidx.legacy:legacy-support-v4:1.0.0")

    implementation('org.jetbrains.kotlin:kotlin-stdlib:2.0.20')

    // KTX extensions
    implementation("androidx.core:core-ktx:1.13.1")
    implementation("androidx.fragment:fragment-ktx:1.8.2")
    implementation("androidx.preference:preference-ktx:1.2.1")
    implementation("androidx.lifecycle:lifecycle-runtime-ktx:2.8.4")
    implementation("androidx.lifecycle:lifecycle-livedata-ktx:2.8.7")

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation("com.google.android.gms:play-services-maps:19.0.0")
    implementation("com.google.android.gms:play-services-location:21.3.0")

    // TODO: migrate to v3.x
    implementation("de.greenrobot:eventbus:2.4.1")

    // Crashlytics Kit
    implementation("com.google.firebase:firebase-crashlytics:19.0.3")

    implementation("com.google.firebase:firebase-analytics:22.1.0")

    // TODO: migrate to https://commons.apache.org/proper/commons-csv/
    implementation("com.googlecode.jcsv:jcsv:1.4.0")
    implementation('com.google.maps.android:android-maps-utils:3.8.2')

    implementation('org.osmdroid:osmdroid-android:6.1.20')
    implementation("com.github.MKergall:osmbonuspack:6.9.0")
    implementation("com.google.android.material:material:1.12.0")
    implementation("androidx.legacy:legacy-support-v13:1.0.0")

    // http://square.github.io/retrofit/
    implementation('com.squareup.retrofit2:retrofit:2.11.0')
    implementation('com.squareup.retrofit2:converter-gson:2.11.0')
    implementation('com.squareup.okhttp3:logging-interceptor:4.12.0')
    implementation("com.squareup.okhttp3:okhttp-urlconnection:4.12.0")

    implementation("androidx.lifecycle:lifecycle-common-java8:2.8.4")

    // Room
    implementation("androidx.room:room-runtime:$room_version")
    ksp("androidx.room:room-compiler:$room_version")
    implementation("androidx.room:room-ktx:$room_version")

    // Coroutines
    implementation('org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.1')

    testImplementation("junit:junit:4.13.2")

    // Instrumentation testing

    androidTestImplementation("androidx.test:runner:1.6.2")
    androidTestUtil("androidx.test:orchestrator:1.5.0")
    androidTestImplementation("androidx.test:rules:1.6.1")
    androidTestImplementation("androidx.test.ext:junit:1.2.1")
    // Optional -- UI testing with Espresso
    androidTestImplementation("androidx.test.espresso:espresso-core:3.6.1")
    androidTestImplementation("androidx.test.espresso:espresso-contrib:3.6.1")
    // mock server for backend
    androidTestImplementation('com.squareup.okhttp3:mockwebserver:4.12.0')
    // Optional -- Hamcrest library
    androidTestImplementation("org.hamcrest:hamcrest:3.0")
    androidTestImplementation("org.hamcrest:hamcrest-library:3.0")
    androidTestImplementation("junit:junit:4.13.2")

    androidTestImplementation("androidx.test.uiautomator:uiautomator:2.3.0")
}
